#!/bin/bash

#
# ArchW by tarkh (c) 2021
#

TIMEOUT=10

#
# Service Active checker
sa() {
  if [ "$(systemctl --user show -p ActiveState --value $1)" == "active" ]; then
    return 0
  fi
  return 1
}

ms() {
  echo $(xset -q | grep Monitor | awk '{print $3;}')
}

acs() {
  if ADP=($(ls /sys/class/power_supply | grep ADP)); then
    if STAT=$(cat /sys/class/power_supply/${ADP}/online); then
      if [ "$STAT" == "1" ]; then
        return 0
      fi
    fi
    return 1
  else
    return 0
  fi
}

#
# Checker eternal loop
while true; do
  #
  # Check Monitor Status
  if [ "$(ms)" == "On" ] && [ -z "$MONITOR_ON" ]; then
    if sa "screen-state-off.target"; then
      systemctl --user stop screen-state-off.target
    fi
    if ! sa "screen-state-on.target"; then
      systemctl --user start screen-state-on.target
    fi
    MONITOR_ON=1
    unset MONITOR_OFF
  elif [ "$(ms)" == "Off" ] && [ -z "$MONITOR_OFF" ]; then
    if sa "screen-state-on.target"; then
      systemctl --user stop screen-state-on.target
    fi
    if ! sa "screen-state-off.target"; then
      systemctl --user start screen-state-off.target
    fi
    MONITOR_OFF=1
    unset MONITOR_ON
  fi

  #
  # Check AC status
  if acs && [ -z "$AC_ON" ]; then
    if sa "dc-state-off.target"; then
      systemctl --user stop dc-state-off.target
    fi
    if ! sa "dc-state-on.target"; then
      systemctl --user start dc-state-on.target
    fi
    AC_ON=1
    unset AC_OFF
  elif ! acs && [ -z "$AC_OFF" ]; then
    if sa "dc-state-on.target"; then
      systemctl --user stop dc-state-on.target
    fi
    if ! sa "dc-state-off.target"; then
      systemctl --user start dc-state-off.target
    fi
    AC_OFF=1
    unset AC_ON
  fi

  #
  # Sleep timeout
  sleep $TIMEOUT
done
